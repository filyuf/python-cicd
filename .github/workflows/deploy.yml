name: Belajar CI/CD Python

on:
  push:
    branches:
      - main

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  build:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t docker/coba:${{ github.sha }} .
  
      - name: Tag Docker image
        run: |
          docker tag docker/coba:${{ github.sha }} 830108781204.dkr.ecr.us-west-2.amazonaws.com/docker/coba:${{ github.sha }}
  
      - name: Push Docker image to ECR
        run: |
          docker push 830108781204.dkr.ecr.us-west-2.amazonaws.com/docker/coba:${{ github.sha }}
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Dockerrun.aws.json
        run: |
          cat <<EOF > Dockerrun.aws.json
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ secrets.ECR_REGISTRY }}/docker/coba:latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "5000"
              }
            ]
          }
          EOF

      - name: Package Dockerrun.aws.json
        run: zip deployment-package.zip Dockerrun.aws.json

      - name: Upload to S3
        run: |
          aws s3 cp deployment-package.zip s3://${{ secrets.S3_BUCKET_NAME }}/deployment-package-${{ github.sha }}.zip

      - name: Create Application Version in Elastic Beanstalk
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name ${{ secrets.EB_APP_NAME }} \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket=${{ secrets.S3_BUCKET_NAME }},S3Key=deployment-package-${{ github.sha }}.zip

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name ${{ secrets.EB_ENV_NAME }} \
            --version-label ${{ github.sha }}

      - name: Check Elastic Beanstalk Health Status
        run: |
          aws elasticbeanstalk describe-environment-health \
            --environment-name ${{ secrets.EB_ENV_NAME }} \
            --attribute HealthStatus --query "HealthStatus"
